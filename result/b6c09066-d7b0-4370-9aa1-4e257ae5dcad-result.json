{"name": "test_Academic_libraries_demo", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\n  (Session info: headless chrome=90.0.4430.212)", "trace": "self = <test_main.TestClass object at 0x7fa9514021c0>\n\n    @allure.story(load_dict[5]['name'])\n    def test_Academic_libraries_demo(self):\n        username = 'i=>username1'\n        username_type, username_value = self.str_split(username)\n        username_text = load_dict[5]['account']\n        pwd = 'i=>passwd1'\n        pwd_type, pwd_value = self.str_split(pwd)\n        pwd_text = load_dict[5]['pwd']\n        btn = 'i=>sub_1'\n        btn_type, btn_value = self.str_split(btn)\n        browser = BrowserEngine()\n        browser.open_browser(load_dict[5]['url'])\n        driver = BasePage(browser.driver)\n        login_a = 'c=>sign-in'\n        login_a_type, login_a_value = self.str_split(login_a)\n        wait_element(browser.driver, 30, 1, login_a_type, login_a_value)\n        driver.click(login_a)\n        pwd_login_a = 'x=>/html/body/div[1]/div[2]/div/div/ul/li[2]/a'\n        pwd_login_a_type, pwd_login_a_value = self.str_split(pwd_login_a)\n        wait_element(browser.driver, 30, 1, pwd_login_a_type, pwd_login_a_value)\n>       driver.click(pwd_login_a)\n\ntest_main.py:116: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nframework/base_page.py:197: in click\n    el.click()\n/root/anaconda3/envs/demo_env_autotest/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n/root/anaconda3/envs/demo_env_autotest/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n/root/anaconda3/envs/demo_env_autotest/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fa951402850>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable: element has zero size\\\\n  (Session info: headless chrome=90.0.4430.212)\",\"stacktrace\":\"#0 0x55ea4cb87e89 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\nE         (Session info: headless chrome=90.0.4430.212)\n\n/root/anaconda3/envs/demo_env_autotest/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:242: ElementNotInteractableException"}, "steps": [{"name": "打开浏览器", "status": "passed", "attachments": [{"name": "操作信息", "source": "3dc0ec2e-015c-4229-9020-f09894860044-attachment.attach"}], "parameters": [{"name": "url", "value": "'http://xsdc2.casdc.com/widgets/Encyclopedia_PC'"}], "start": 1620976825781, "stop": 1620976828556}, {"name": "等待元素", "status": "passed", "attachments": [{"name": "操作信息", "source": "8ed4f544-7d1c-4782-a704-0864e194301d-attachment.attach"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"fa47b95034411dda80b392c576dd3b77\")>"}, {"name": "wait_time", "value": "30"}, {"name": "step", "value": "1"}, {"name": "selector_tpye", "value": "'c'"}, {"name": "selector", "value": "'sign-in'"}], "start": 1620976828556, "stop": 1620976828565}, {"name": "点击元素", "status": "passed", "attachments": [{"name": "操作信息", "source": "fe18db77-5fbf-461e-b435-8c2e1260daca-attachment.attach"}], "parameters": [{"name": "selector", "value": "'c=>sign-in'"}], "start": 1620976828565, "stop": 1620976828970}, {"name": "等待元素", "status": "passed", "attachments": [{"name": "操作信息", "source": "972706f6-9393-4681-9636-519c5372ea69-attachment.attach"}], "parameters": [{"name": "driver", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"fa47b95034411dda80b392c576dd3b77\")>"}, {"name": "wait_time", "value": "30"}, {"name": "step", "value": "1"}, {"name": "selector_tpye", "value": "'x'"}, {"name": "selector", "value": "'/html/body/div[1]/div[2]/div/div/ul/li[2]/a'"}], "start": 1620976828970, "stop": 1620976828991}, {"name": "点击元素", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable: element has zero size\n  (Session info: headless chrome=90.0.4430.212)\n\n", "trace": "  File \"/root/anaconda3/envs/demo_env_autotest/lib/python3.8/site-packages/allure_commons/_allure.py\", line 172, in impl\n    return func(*a, **kw)\n  File \"/root/ceshibu/demo_environment_automation/framework/base_page.py\", line 197, in click\n    el.click()\n  File \"/root/anaconda3/envs/demo_env_autotest/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py\", line 80, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"/root/anaconda3/envs/demo_env_autotest/lib/python3.8/site-packages/selenium/webdriver/remote/webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"/root/anaconda3/envs/demo_env_autotest/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/root/anaconda3/envs/demo_env_autotest/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "attachments": [{"name": "操作信息", "source": "c20b6bdc-f90d-48e6-b6bb-0e673925b4d7-attachment.attach"}], "parameters": [{"name": "selector", "value": "'x=>/html/body/div[1]/div[2]/div/div/ul/li[2]/a'"}], "start": 1620976828991, "stop": 1620976829025}], "attachments": [{"name": "log", "source": "ee141fa1-272a-4e42-8443-01f21726f7a7-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "34b0928c-d121-4222-a53f-17253890f9e7-attachment.txt", "type": "text/plain"}], "start": 1620976824662, "stop": 1620976829026, "uuid": "371549fb-2f16-4aa8-bc45-9f74db7c6340", "historyId": "854eda620d61100b32fa215388ab7065", "testCaseId": "efcc19df767b72cbee36e80d987cbbaf", "fullName": "test_main.TestClass#test_Academic_libraries_demo", "labels": [{"name": "story", "value": "学术典藏demo"}, {"name": "feature", "value": "验证演示环境各链接是否活跃"}, {"name": "suite", "value": "test_main"}, {"name": "subSuite", "value": "TestClass"}, {"name": "host", "value": "AliYun"}, {"name": "thread", "value": "17318-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_main"}]}